% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bind_tf_idf2.R
\name{bind_tf_idf2}
\alias{bind_tf_idf2}
\title{Bind the term frequency and inverse document frequency}
\usage{
bind_tf_idf2(
  tbl,
  term = "token",
  document = "doc_id",
  n = "n",
  tf = c("tf", "tf2", "tf3"),
  idf = c("idf", "idf2", "idf3", "idf4"),
  norm = FALSE
)
}
\arguments{
\item{tbl}{A tidy text dataset with one-row-per-term-per-document.}

\item{term}{Column containing terms as string or symbol.}

\item{document}{Column containing document IDs as string or symbol.}

\item{n}{Column containing document-term counts as string or symbol.}

\item{tf}{Method for computing term frequency.}

\item{idf}{Method for computing inverse document frequency.}

\item{norm}{Logical; If true, the raw term frequencies are normalized
being divided with L2 norms before computing values.}
}
\value{
data.frame.
}
\description{
Calculate and bind the term frequency, inverse document frequency,
and tf-idf of the dataset.
This funciton experimentally supports 3 types of term frequencies
and 4 types of inverse document frequencies,
that are provided in the RMeCab package's functionalities.
}
\details{
Types of term frequency can be switched with \code{tf} argument:
\itemize{
\item \code{tf} is term frequency (not raw count of terms).
\item \code{tf2} is logarithmic term frequency of which base is 10.
\item \code{tf3} is binary-weighted term frequency.
}

Types of inverse document frequencies can be switched with \code{idf} argument:
\itemize{
\item \code{idf} is inverse document frequency of which base is 2, with smoothed.
'smoothed' here means just adding 1 to raw count before logarithmizing.
\item \code{idf2} is global frequency idf.
\item \code{idf3} is probabilistic idf of which base is 2.
\item \code{idf4} is global entropy, not idf in actual.
}
}
\examples{
\dontrun{
df <- tokenize(
  data.frame(
    doc_id = seq_len(length(audubon::polano[5:8])),
    text = audubon::polano[5:8]
  )
)
df <- dplyr::group_by(df, doc_id) |>
  dplyr::count(token) |>
  dplyr::ungroup()
bind_tf_idf2(df)
}
}
