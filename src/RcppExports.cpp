// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gibasa.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dictionary_info
Rcpp::DataFrame dictionary_info(std::string sys_dic, std::string user_dic);
static SEXP _gibasa_dictionary_info_try(SEXP sys_dicSEXP, SEXP user_dicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type sys_dic(sys_dicSEXP);
    Rcpp::traits::input_parameter< std::string >::type user_dic(user_dicSEXP);
    rcpp_result_gen = Rcpp::wrap(dictionary_info(sys_dic, user_dic));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gibasa_dictionary_info(SEXP sys_dicSEXP, SEXP user_dicSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gibasa_dictionary_info_try(sys_dicSEXP, user_dicSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// transition_cost
int transition_cost(unsigned short rcAttr, unsigned short lcAttr, std::string sys_dic, std::string user_dic);
static SEXP _gibasa_transition_cost_try(SEXP rcAttrSEXP, SEXP lcAttrSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned short >::type rcAttr(rcAttrSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type lcAttr(lcAttrSEXP);
    Rcpp::traits::input_parameter< std::string >::type sys_dic(sys_dicSEXP);
    Rcpp::traits::input_parameter< std::string >::type user_dic(user_dicSEXP);
    rcpp_result_gen = Rcpp::wrap(transition_cost(rcAttr, lcAttr, sys_dic, user_dic));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gibasa_transition_cost(SEXP rcAttrSEXP, SEXP lcAttrSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gibasa_transition_cost_try(rcAttrSEXP, lcAttrSEXP, sys_dicSEXP, user_dicSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// posDebugRcpp
Rcpp::DataFrame posDebugRcpp(std::vector<std::string> text, std::string sys_dic, std::string user_dic, Rcpp::LogicalVector partial);
static SEXP _gibasa_posDebugRcpp_try(SEXP textSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP, SEXP partialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type sys_dic(sys_dicSEXP);
    Rcpp::traits::input_parameter< std::string >::type user_dic(user_dicSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type partial(partialSEXP);
    rcpp_result_gen = Rcpp::wrap(posDebugRcpp(text, sys_dic, user_dic, partial));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gibasa_posDebugRcpp(SEXP textSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP, SEXP partialSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gibasa_posDebugRcpp_try(textSEXP, sys_dicSEXP, user_dicSEXP, partialSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// posParallelRcpp
Rcpp::DataFrame posParallelRcpp(std::vector<std::string> text, std::string sys_dic, std::string user_dic, Rcpp::LogicalVector partial, std::size_t grain_size);
static SEXP _gibasa_posParallelRcpp_try(SEXP textSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP, SEXP partialSEXP, SEXP grain_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type sys_dic(sys_dicSEXP);
    Rcpp::traits::input_parameter< std::string >::type user_dic(user_dicSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type partial(partialSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type grain_size(grain_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(posParallelRcpp(text, sys_dic, user_dic, partial, grain_size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gibasa_posParallelRcpp(SEXP textSEXP, SEXP sys_dicSEXP, SEXP user_dicSEXP, SEXP partialSEXP, SEXP grain_sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gibasa_posParallelRcpp_try(textSEXP, sys_dicSEXP, user_dicSEXP, partialSEXP, grain_sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _gibasa_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::DataFrame(*dictionary_info)(std::string,std::string)");
        signatures.insert("int(*transition_cost)(unsigned short,unsigned short,std::string,std::string)");
        signatures.insert("Rcpp::DataFrame(*posDebugRcpp)(std::vector<std::string>,std::string,std::string,Rcpp::LogicalVector)");
        signatures.insert("Rcpp::DataFrame(*posParallelRcpp)(std::vector<std::string>,std::string,std::string,Rcpp::LogicalVector,std::size_t)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _gibasa_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gibasa", "_gibasa_dictionary_info", (DL_FUNC)_gibasa_dictionary_info_try);
    R_RegisterCCallable("gibasa", "_gibasa_transition_cost", (DL_FUNC)_gibasa_transition_cost_try);
    R_RegisterCCallable("gibasa", "_gibasa_posDebugRcpp", (DL_FUNC)_gibasa_posDebugRcpp_try);
    R_RegisterCCallable("gibasa", "_gibasa_posParallelRcpp", (DL_FUNC)_gibasa_posParallelRcpp_try);
    R_RegisterCCallable("gibasa", "_gibasa_RcppExport_validate", (DL_FUNC)_gibasa_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_gibasa_dictionary_info", (DL_FUNC) &_gibasa_dictionary_info, 2},
    {"_gibasa_transition_cost", (DL_FUNC) &_gibasa_transition_cost, 4},
    {"_gibasa_posDebugRcpp", (DL_FUNC) &_gibasa_posDebugRcpp, 4},
    {"_gibasa_posParallelRcpp", (DL_FUNC) &_gibasa_posParallelRcpp, 5},
    {"_gibasa_RcppExport_registerCCallable", (DL_FUNC) &_gibasa_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_gibasa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
